
light-controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000037e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000f  00800060  00800060  000003f2  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000e3  00000000  00000000  00000412  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000321  00000000  00000000  000004f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000014d  00000000  00000000  00000816  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000371  00000000  00000000  00000963  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000168  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000a2  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	5b c0       	rjmp	.+182    	; 0xbc <__vector_2>
   6:	aa c0       	rjmp	.+340    	; 0x15c <__vector_3>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	11 c0       	rjmp	.+34     	; 0x30 <__bad_interrupt>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	af 36       	cpi	r26, 0x6F	; 111
  28:	b1 07       	cpc	r27, r17
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	12 d1       	rcall	.+548    	; 0x252 <main>
  2e:	a5 c1       	rjmp	.+842    	; 0x37a <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <eeprom_read_byte>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
  32:	e1 99       	sbic	0x1c, 1	; 28
  34:	fe cf       	rjmp	.-4      	; 0x32 <eeprom_read_byte>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
  36:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
  38:	e0 9a       	sbi	0x1c, 0	; 28
  3a:	8d b3       	in	r24, 0x1d	; 29
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
}
  3c:	08 95       	ret

0000003e <fade>:
// Clock cycle is 0.0000133 sec
// Overflow is 3ms

// Fade to the specified level over the specified time (in tenths of a second) 
void fade(unsigned char brightness, unsigned int time){
	TCCR0A |= 0x80; // Start PWM
  3e:	9f b5       	in	r25, 0x2f	; 47
  40:	90 68       	ori	r25, 0x80	; 128
  42:	9f bd       	out	0x2f, r25	; 47
	target_level = brightness;
  44:	80 93 61 00 	sts	0x0061, r24
	int diff = target_level-current_level;
  48:	20 91 61 00 	lds	r18, 0x0061
  4c:	30 e0       	ldi	r19, 0x00	; 0
  4e:	80 91 66 00 	lds	r24, 0x0066
  52:	28 1b       	sub	r18, r24
  54:	31 09       	sbc	r19, r1
	int ovfs = 29*time;
  56:	cb 01       	movw	r24, r22
  58:	6d e1       	ldi	r22, 0x1D	; 29
  5a:	70 e0       	ldi	r23, 0x00	; 0
  5c:	55 d1       	rcall	.+682    	; 0x308 <__mulhi3>
  5e:	fc 01       	movw	r30, r24
	step_rate = ovfs/diff;
  60:	b9 01       	movw	r22, r18
  62:	64 d1       	rcall	.+712    	; 0x32c <__divmodhi4>
  64:	70 93 6e 00 	sts	0x006E, r23
  68:	60 93 6d 00 	sts	0x006D, r22
  6c:	37 ff       	sbrs	r19, 7
  6e:	03 c0       	rjmp	.+6      	; 0x76 <__SREG__+0x37>
  70:	30 95       	com	r19
  72:	21 95       	neg	r18
  74:	3f 4f       	sbci	r19, 0xFF	; 255
	if(diff < 0)
		diff = -diff;
	// Round without using floating point numbers
	if(ovfs%diff >= diff/2){
  76:	cf 01       	movw	r24, r30
  78:	b9 01       	movw	r22, r18
  7a:	58 d1       	rcall	.+688    	; 0x32c <__divmodhi4>
  7c:	35 95       	asr	r19
  7e:	27 95       	ror	r18
  80:	82 17       	cp	r24, r18
  82:	93 07       	cpc	r25, r19
  84:	d4 f0       	brlt	.+52     	; 0xba <__stack+0x1b>
		if(step_rate > 0)
  86:	80 91 6d 00 	lds	r24, 0x006D
  8a:	90 91 6e 00 	lds	r25, 0x006E
  8e:	18 16       	cp	r1, r24
  90:	19 06       	cpc	r1, r25
  92:	54 f4       	brge	.+20     	; 0xa8 <__stack+0x9>
			step_rate++;
  94:	80 91 6d 00 	lds	r24, 0x006D
  98:	90 91 6e 00 	lds	r25, 0x006E
  9c:	01 96       	adiw	r24, 0x01	; 1
  9e:	90 93 6e 00 	sts	0x006E, r25
  a2:	80 93 6d 00 	sts	0x006D, r24
  a6:	08 95       	ret
		else
			step_rate--;
  a8:	80 91 6d 00 	lds	r24, 0x006D
  ac:	90 91 6e 00 	lds	r25, 0x006E
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	90 93 6e 00 	sts	0x006E, r25
  b6:	80 93 6d 00 	sts	0x006D, r24
  ba:	08 95       	ret

000000bc <__vector_2>:
	}
}

ISR(PCINT0_vect){
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	2f 93       	push	r18
  c8:	3f 93       	push	r19
  ca:	4f 93       	push	r20
  cc:	5f 93       	push	r21
  ce:	6f 93       	push	r22
  d0:	7f 93       	push	r23
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	af 93       	push	r26
  d8:	bf 93       	push	r27
  da:	ef 93       	push	r30
  dc:	ff 93       	push	r31
	if(bounce == 0){
  de:	80 91 6a 00 	lds	r24, 0x006A
  e2:	88 23       	and	r24, r24
  e4:	51 f5       	brne	.+84     	; 0x13a <__vector_2+0x7e>
		bounce = BOUNCE_OVF;
  e6:	8f e0       	ldi	r24, 0x0F	; 15
  e8:	80 93 6a 00 	sts	0x006A, r24

		unsigned char level = current_level;
  ec:	20 91 66 00 	lds	r18, 0x0066
		if(~PINB & (DIM | OFF)){
  f0:	86 b3       	in	r24, 0x16	; 22
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	80 95       	com	r24
  f6:	90 95       	com	r25
  f8:	8a 70       	andi	r24, 0x0A	; 10
  fa:	90 70       	andi	r25, 0x00	; 0
  fc:	89 2b       	or	r24, r25
  fe:	89 f0       	breq	.+34     	; 0x122 <__vector_2+0x66>
			sleep_remaining = off_time;
 100:	80 91 62 00 	lds	r24, 0x0062
 104:	90 91 63 00 	lds	r25, 0x0063
 108:	90 93 6c 00 	sts	0x006C, r25
 10c:	80 93 6b 00 	sts	0x006B, r24
			if(~PINB & DIM)
 110:	b1 99       	sbic	0x16, 1	; 22
 112:	03 c0       	rjmp	.+6      	; 0x11a <__vector_2+0x5e>
				level = dim_level;
 114:	20 91 65 00 	lds	r18, 0x0065
 118:	0b c0       	rjmp	.+22     	; 0x130 <__vector_2+0x74>
			else if(~PINB & OFF)
 11a:	b3 99       	sbic	0x16, 3	; 22
 11c:	09 c0       	rjmp	.+18     	; 0x130 <__vector_2+0x74>
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	07 c0       	rjmp	.+14     	; 0x130 <__vector_2+0x74>
				level = 0;
		} else if(~PINB & ON) {
 122:	b4 99       	sbic	0x16, 4	; 22
 124:	05 c0       	rjmp	.+10     	; 0x130 <__vector_2+0x74>
			sleep_remaining = 0;
 126:	10 92 6c 00 	sts	0x006C, r1
 12a:	10 92 6b 00 	sts	0x006B, r1
 12e:	2f ef       	ldi	r18, 0xFF	; 255
			level = 255;
		}
		fade(level, fade_time);
 130:	60 91 64 00 	lds	r22, 0x0064
 134:	82 2f       	mov	r24, r18
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	82 df       	rcall	.-252    	; 0x3e <fade>
		
	}
}
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	bf 91       	pop	r27
 140:	af 91       	pop	r26
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	7f 91       	pop	r23
 148:	6f 91       	pop	r22
 14a:	5f 91       	pop	r21
 14c:	4f 91       	pop	r20
 14e:	3f 91       	pop	r19
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <__vector_3>:

// Overflow
ISR(TIM0_OVF_vect){
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	2f 93       	push	r18
 168:	3f 93       	push	r19
 16a:	4f 93       	push	r20
 16c:	5f 93       	push	r21
 16e:	6f 93       	push	r22
 170:	7f 93       	push	r23
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
 176:	af 93       	push	r26
 178:	bf 93       	push	r27
 17a:	ef 93       	push	r30
 17c:	ff 93       	push	r31
	// Debounce inputs
	if(bounce > 0)
 17e:	80 91 6a 00 	lds	r24, 0x006A
 182:	88 23       	and	r24, r24
 184:	29 f0       	breq	.+10     	; 0x190 <__vector_3+0x34>
		bounce--;
 186:	80 91 6a 00 	lds	r24, 0x006A
 18a:	81 50       	subi	r24, 0x01	; 1
 18c:	80 93 6a 00 	sts	0x006A, r24
	
	// Handle sleep time
	sleep_count++;
 190:	80 91 67 00 	lds	r24, 0x0067
 194:	8f 5f       	subi	r24, 0xFF	; 255
 196:	80 93 67 00 	sts	0x0067, r24
	if(sleep_count == 0 && sleep_remaining > 0){
 19a:	80 91 67 00 	lds	r24, 0x0067
 19e:	88 23       	and	r24, r24
 1a0:	d9 f4       	brne	.+54     	; 0x1d8 <__vector_3+0x7c>
 1a2:	80 91 6b 00 	lds	r24, 0x006B
 1a6:	90 91 6c 00 	lds	r25, 0x006C
 1aa:	89 2b       	or	r24, r25
 1ac:	a9 f0       	breq	.+42     	; 0x1d8 <__vector_3+0x7c>
		sleep_remaining--;
 1ae:	80 91 6b 00 	lds	r24, 0x006B
 1b2:	90 91 6c 00 	lds	r25, 0x006C
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	90 93 6c 00 	sts	0x006C, r25
 1bc:	80 93 6b 00 	sts	0x006B, r24
		if(sleep_remaining == 0)
 1c0:	80 91 6b 00 	lds	r24, 0x006B
 1c4:	90 91 6c 00 	lds	r25, 0x006C
 1c8:	89 2b       	or	r24, r25
 1ca:	31 f4       	brne	.+12     	; 0x1d8 <__vector_3+0x7c>
			fade(255, ramp_time);
 1cc:	60 91 68 00 	lds	r22, 0x0068
 1d0:	70 91 69 00 	lds	r23, 0x0069
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	33 df       	rcall	.-410    	; 0x3e <fade>
	}

	// Handle fade routine
	state++;
 1d8:	80 91 60 00 	lds	r24, 0x0060
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	80 93 60 00 	sts	0x0060, r24
	if(state%step_rate == 0 && current_level != target_level){
 1e2:	60 91 6d 00 	lds	r22, 0x006D
 1e6:	70 91 6e 00 	lds	r23, 0x006E
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	9f d0       	rcall	.+318    	; 0x32c <__divmodhi4>
 1ee:	89 2b       	or	r24, r25
 1f0:	f9 f4       	brne	.+62     	; 0x230 <__vector_3+0xd4>
 1f2:	90 91 66 00 	lds	r25, 0x0066
 1f6:	80 91 61 00 	lds	r24, 0x0061
 1fa:	98 17       	cp	r25, r24
 1fc:	c9 f0       	breq	.+50     	; 0x230 <__vector_3+0xd4>
		if(current_level < target_level)
 1fe:	80 91 61 00 	lds	r24, 0x0061
 202:	98 17       	cp	r25, r24
 204:	10 f4       	brcc	.+4      	; 0x20a <__vector_3+0xae>
			current_level++;
 206:	9f 5f       	subi	r25, 0xFF	; 255
 208:	01 c0       	rjmp	.+2      	; 0x20c <__vector_3+0xb0>
		else
			current_level--;
 20a:	91 50       	subi	r25, 0x01	; 1
 20c:	90 93 66 00 	sts	0x0066, r25
		OCR0A = current_level;
 210:	80 91 66 00 	lds	r24, 0x0066
 214:	86 bf       	out	0x36, r24	; 54
		if(current_level == 0){
 216:	88 23       	and	r24, r24
 218:	29 f4       	brne	.+10     	; 0x224 <__vector_3+0xc8>
			TCCR0A &= ~(0x80); // Stop PWM
 21a:	8f b5       	in	r24, 0x2f	; 47
 21c:	8f 77       	andi	r24, 0x7F	; 127
 21e:	8f bd       	out	0x2f, r24	; 47
			PORTB &= ~(PWM);
 220:	c0 98       	cbi	0x18, 0	; 24
 222:	06 c0       	rjmp	.+12     	; 0x230 <__vector_3+0xd4>
		} else if(current_level == 255) {
 224:	8f 3f       	cpi	r24, 0xFF	; 255
 226:	21 f4       	brne	.+8      	; 0x230 <__vector_3+0xd4>
			TCCR0A &= ~(0x80); // Stop PWM
 228:	8f b5       	in	r24, 0x2f	; 47
 22a:	8f 77       	andi	r24, 0x7F	; 127
 22c:	8f bd       	out	0x2f, r24	; 47
			PORTB |= PWM;
 22e:	c0 9a       	sbi	0x18, 0	; 24
		}
	}
		

}
 230:	ff 91       	pop	r31
 232:	ef 91       	pop	r30
 234:	bf 91       	pop	r27
 236:	af 91       	pop	r26
 238:	9f 91       	pop	r25
 23a:	8f 91       	pop	r24
 23c:	7f 91       	pop	r23
 23e:	6f 91       	pop	r22
 240:	5f 91       	pop	r21
 242:	4f 91       	pop	r20
 244:	3f 91       	pop	r19
 246:	2f 91       	pop	r18
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <main>:
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	69 e1       	ldi	r22, 0x19	; 25
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	40 d0       	rcall	.+128    	; 0x2dc <__eerd_word>

// Setup the registers and read settings from EEPROM
int main(){
	// Read settings from EEPROM
	
	off_time 	= ((unsigned int )eeprom_read_word(OFF_TIME_ADDR ));
 25c:	90 93 63 00 	sts	0x0063, r25
 260:	80 93 62 00 	sts	0x0062, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 264:	e1 99       	sbic	0x1c, 1	; 28
 266:	fe cf       	rjmp	.-4      	; 0x264 <main+0x12>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
 26c:	e0 9a       	sbi	0x1c, 0	; 28
 26e:	8d b3       	in	r24, 0x1d	; 29
	ramp_time   = ((unsigned char )eeprom_read_byte(RAMP_TIME_ADDR))*(unsigned int)100;
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	64 e6       	ldi	r22, 0x64	; 100
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	48 d0       	rcall	.+144    	; 0x308 <__mulhi3>
 278:	90 93 69 00 	sts	0x0069, r25
 27c:	80 93 68 00 	sts	0x0068, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 280:	e1 99       	sbic	0x1c, 1	; 28
 282:	fe cf       	rjmp	.-4      	; 0x280 <main+0x2e>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
 284:	83 e0       	ldi	r24, 0x03	; 3
 286:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
 288:	e0 9a       	sbi	0x1c, 0	; 28
 28a:	8d b3       	in	r24, 0x1d	; 29
	fade_time   = ((unsigned char )eeprom_read_byte(FADE_TIME_ADDR));
 28c:	80 93 64 00 	sts	0x0064, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 290:	e1 99       	sbic	0x1c, 1	; 28
 292:	fe cf       	rjmp	.-4      	; 0x290 <main+0x3e>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
 294:	84 e0       	ldi	r24, 0x04	; 4
 296:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
 298:	e0 9a       	sbi	0x1c, 0	; 28
 29a:	8d b3       	in	r24, 0x1d	; 29
	dim_level	= ((unsigned char)eeprom_read_byte(DIM_LVL_ADDR));
 29c:	80 93 65 00 	sts	0x0065, r24
	

	DDRB |= PWM; // Set SWITCH to output
 2a0:	b8 9a       	sbi	0x17, 0	; 23
	DDRB &= ~(ON | DIM | OFF | SENSE); // Set ON, OFF, DIM, SENSE to input
 2a2:	87 b3       	in	r24, 0x17	; 23
 2a4:	81 7e       	andi	r24, 0xE1	; 225
 2a6:	87 bb       	out	0x17, r24	; 23
	PORTB |= (ON | DIM | OFF ); // Enable Pull Up resistors
 2a8:	88 b3       	in	r24, 0x18	; 24
 2aa:	8a 61       	ori	r24, 0x1A	; 26
 2ac:	88 bb       	out	0x18, r24	; 24

	TIMSK0 |= 0x02; // Enable timer overflow interrupts
 2ae:	89 b7       	in	r24, 0x39	; 57
 2b0:	82 60       	ori	r24, 0x02	; 2
 2b2:	89 bf       	out	0x39, r24	; 57

	GIMSK |= 0x20; // Enable Pin Change interrupts
 2b4:	8b b7       	in	r24, 0x3b	; 59
 2b6:	80 62       	ori	r24, 0x20	; 32
 2b8:	8b bf       	out	0x3b, r24	; 59
	PCMSK |= 0x1A; // Interupt on 1, 3, 4
 2ba:	85 b3       	in	r24, 0x15	; 21
 2bc:	8a 61       	ori	r24, 0x1A	; 26
 2be:	85 bb       	out	0x15, r24	; 21

	// Enable PWM on OCR0A
	TCCR0B |= 0x03; // Divide clock by 64	
 2c0:	83 b7       	in	r24, 0x33	; 51
 2c2:	83 60       	ori	r24, 0x03	; 3
 2c4:	83 bf       	out	0x33, r24	; 51
	TCCR0A |= 0x83; // Fast PWM
 2c6:	8f b5       	in	r24, 0x2f	; 47
 2c8:	83 68       	ori	r24, 0x83	; 131
 2ca:	8f bd       	out	0x2f, r24	; 47
	current_level = 255;
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	80 93 66 00 	sts	0x0066, r24
	target_level = 255;
 2d2:	80 93 61 00 	sts	0x0061, r24
	OCR0A = 255; // Start lights at full
 2d6:	86 bf       	out	0x36, r24	; 54

	sei(); // Enable global interrupts
 2d8:	78 94       	sei
 2da:	ff cf       	rjmp	.-2      	; 0x2da <main+0x88>

000002dc <__eerd_word>:
 2dc:	df 92       	push	r13
 2de:	ef 92       	push	r14
 2e0:	ff 92       	push	r15
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	7b 01       	movw	r14, r22
 2e8:	8c 01       	movw	r16, r24
 2ea:	fb 01       	movw	r30, r22
 2ec:	09 95       	icall
 2ee:	d8 2e       	mov	r13, r24
 2f0:	c8 01       	movw	r24, r16
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	f7 01       	movw	r30, r14
 2f6:	09 95       	icall
 2f8:	98 2f       	mov	r25, r24
 2fa:	8d 2d       	mov	r24, r13
 2fc:	1f 91       	pop	r17
 2fe:	0f 91       	pop	r16
 300:	ff 90       	pop	r15
 302:	ef 90       	pop	r14
 304:	df 90       	pop	r13
 306:	08 95       	ret

00000308 <__mulhi3>:
 308:	55 27       	eor	r21, r21
 30a:	00 24       	eor	r0, r0

0000030c <__mulhi3_loop>:
 30c:	80 ff       	sbrs	r24, 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <__mulhi3_skip1>
 310:	06 0e       	add	r0, r22
 312:	57 1f       	adc	r21, r23

00000314 <__mulhi3_skip1>:
 314:	66 0f       	add	r22, r22
 316:	77 1f       	adc	r23, r23
 318:	61 15       	cp	r22, r1
 31a:	71 05       	cpc	r23, r1
 31c:	21 f0       	breq	.+8      	; 0x326 <__mulhi3_exit>
 31e:	96 95       	lsr	r25
 320:	87 95       	ror	r24
 322:	00 97       	sbiw	r24, 0x00	; 0
 324:	99 f7       	brne	.-26     	; 0x30c <__mulhi3_loop>

00000326 <__mulhi3_exit>:
 326:	95 2f       	mov	r25, r21
 328:	80 2d       	mov	r24, r0
 32a:	08 95       	ret

0000032c <__divmodhi4>:
 32c:	97 fb       	bst	r25, 7
 32e:	09 2e       	mov	r0, r25
 330:	07 26       	eor	r0, r23
 332:	0a d0       	rcall	.+20     	; 0x348 <__divmodhi4_neg1>
 334:	77 fd       	sbrc	r23, 7
 336:	04 d0       	rcall	.+8      	; 0x340 <__divmodhi4_neg2>
 338:	0c d0       	rcall	.+24     	; 0x352 <__udivmodhi4>
 33a:	06 d0       	rcall	.+12     	; 0x348 <__divmodhi4_neg1>
 33c:	00 20       	and	r0, r0
 33e:	1a f4       	brpl	.+6      	; 0x346 <__divmodhi4_exit>

00000340 <__divmodhi4_neg2>:
 340:	70 95       	com	r23
 342:	61 95       	neg	r22
 344:	7f 4f       	sbci	r23, 0xFF	; 255

00000346 <__divmodhi4_exit>:
 346:	08 95       	ret

00000348 <__divmodhi4_neg1>:
 348:	f6 f7       	brtc	.-4      	; 0x346 <__divmodhi4_exit>
 34a:	90 95       	com	r25
 34c:	81 95       	neg	r24
 34e:	9f 4f       	sbci	r25, 0xFF	; 255
 350:	08 95       	ret

00000352 <__udivmodhi4>:
 352:	aa 1b       	sub	r26, r26
 354:	bb 1b       	sub	r27, r27
 356:	51 e1       	ldi	r21, 0x11	; 17
 358:	07 c0       	rjmp	.+14     	; 0x368 <__udivmodhi4_ep>

0000035a <__udivmodhi4_loop>:
 35a:	aa 1f       	adc	r26, r26
 35c:	bb 1f       	adc	r27, r27
 35e:	a6 17       	cp	r26, r22
 360:	b7 07       	cpc	r27, r23
 362:	10 f0       	brcs	.+4      	; 0x368 <__udivmodhi4_ep>
 364:	a6 1b       	sub	r26, r22
 366:	b7 0b       	sbc	r27, r23

00000368 <__udivmodhi4_ep>:
 368:	88 1f       	adc	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	5a 95       	dec	r21
 36e:	a9 f7       	brne	.-22     	; 0x35a <__udivmodhi4_loop>
 370:	80 95       	com	r24
 372:	90 95       	com	r25
 374:	bc 01       	movw	r22, r24
 376:	cd 01       	movw	r24, r26
 378:	08 95       	ret

0000037a <_exit>:
 37a:	f8 94       	cli

0000037c <__stop_program>:
 37c:	ff cf       	rjmp	.-2      	; 0x37c <__stop_program>
